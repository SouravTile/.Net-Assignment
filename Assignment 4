1)Create Account class having instance member 
1. id- id should be generated by application, it is readonly property
2. name – write getter setter 
3. balance- Write getter setter 
It has deposit method who’s job is to increase the balance. Declare static float Interestrate=0.07. It has withdraw method who’s job is to reduce balance. Declare conts float minbal=1000. When user withdraw money your application should ensure that minimum balance is maintain. 
Give appropriate validation like user can not deposit or withdraw 0 or negative. user can not open account with 0 amount. When you run your application at the beginning it should print name of bank and copy right detail. It has static method which will calculate and return  interest amount for each account holder and increase the balance.
Write display method who’s job is to display Id name and balance and interest received.
If you are comfortable the exception try to use it and handle it also.
sol:


using System;

namespace Assignment_4
{
    public class Account
    {
        int id;
        static int getid;
        string name;
        double balance;
        static float InterestRate = 0.07f;
        const float minbal = 1000;
        double interest;

        public int Id
        {
            get { return id; }
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public double Balance
        {
            get { return balance; }
            set { balance = value; }
        }
        public double Interest
        {
            get { return interest; } 
            set { interest = value; } 
        }

        static Account()
        {
            Console.WriteLine("Bank of Spain @Infopro Limited.com");
        }

        public Account(string name, int balance)
        {
            Name = name;
            if (balance > 0)
                Balance = balance;
            else
            {
                throw new Exception("Balance should be greater than zero");
            }
            this.id = ++getid;
        }

        public void deposit(int amount)
        {
            if (amount > 0)
                balance += amount;
        }
        public void withdraw(int amount)
        {
            if (balance - amount > 1000)
            {
                balance -= amount;
            }
            else
            {
                throw new Exception(" Not sufficient Balance ");
            }
        }

        public static double payInt(Account obj)
        {
            obj.Interest = obj.balance * InterestRate;
            obj.balance += obj.Interest;
            return obj.Interest;
        }

        public void display()
        {
            Console.WriteLine("Name : {0} id : {1} balance : {2} interest  : {3}", name, id, balance, interest);
        }

    }
    public class Demo
    {
        public static void Main()
        {
            Account acnt1=null;
            Account acnt2=null;
            try 
            {
                acnt1 = new Account("KL", 50000);
            }
            catch(Exception ie)
            {
                Console.WriteLine(ie);
            }
            try
            {
                acnt2 = new Account("AB", 100000);
            }
            catch (Exception ie)
            {
                Console.WriteLine(ie);
            }
            
            acnt1.deposit(50000);
            acnt2.deposit(600000);
            try { acnt1.withdraw(20000); }
            catch(Exception ie)
            {
                Console.WriteLine(ie);
            }
            try { acnt2.withdraw(40000); }
            catch(Exception ie)
            {
                Console.WriteLine(ie);
            }
            
            Console.WriteLine("Account1 has interest = "+Account.payInt(acnt1));
            Console.WriteLine("Account2 has interest = "+Account.payInt(acnt2));
            acnt1.display();
            acnt2.display();
        }

    }
}

2)Create a class Employee having private instance member 
id - id is readonly property and generated by your application
name- write getter setter
salary- write getter setter
net salary
Write method who’s job is to deduct TDS 10% and return tax amount and set netsalary instance member after deducting tax.
Declare TDS as static variable.
Your application should create only 3 object if you try to create 4th object it should throw exception.
Give appropriate validation like salary can not be 0 or negative, maximum
Salary allowed is 50000 if you try to set more then 50000 it should give some error message.
When you run your application it should print name of company.
sol:

using System;
namespace Assignment_4
{
    class Employee
    {
        int id;
        static int getid;
        string name;
        double salary;
        double netSalary;
        static float TDS = 0.10f;

        static Employee()
        {
            Console.WriteLine("Showing Specter List");
        }
        public int ID
        {
            get { return getid; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public double Salary
        {
            get { return salary; }
            set
            {
                if (value > 0 && value < 50000)
                    salary = value;
                else
                    throw new Exception("zero & negative values are not allowed or salary greater than 50000");
            }
        }

        public Employee(string name, double salary)
        {
            if (id < 4)
            {
                id = ++getid;
            }
            else
            {
                throw new Exception("Only 4 objects create ");
            }
            Name = name;
            try
            {
                Salary = salary;
            }
            catch (Exception ie)
            {
                Console.WriteLine(ie);
            }
        }

        public static double deductTDS(Employee emp)
        {
            double tax = emp.Salary * TDS;
            emp.netSalary = emp.Salary - tax;
            return tax;
        }
        public void display()
        {
            Console.WriteLine("Id : {0}  Name : {1}  NetSalary : {2}",id,name,netSalary);
        }
    }
    public class Demo
    {
        public static void Main()
        {
            Employee emp1 = new Employee("Starc", 10000);
            Employee emp2 = new Employee("AB", 20000);
            Employee emp3 = new Employee("Steve", 30000);
            Employee emp4 = null;
            try
            {
                emp4 = new Employee("Babar", 40000);
            }
            catch (Exception ie)
            {
                Console.WriteLine(ie);
            }
            Console.WriteLine("The deducted tax of emp1 is : " + Employee.deductTDS(emp1));
            Console.WriteLine("The deducted tax of emp2 is : " + Employee.deductTDS(emp2));
            Console.WriteLine("The deducted tax of emp3 is : " + Employee.deductTDS(emp3));
            emp1.display();
            emp2.display();
            emp3.display();
        }
    }
}

3)Create array of class Account and display name and balance 
sol:
using System;
namespace Problem3
{
	class Account
	{
		string name;
		double balance
	
		public Account(string name, double balance)
		{
			Name = name;
			Balance	= balance;
		}
		public string Name
		{
			get{return name;}
			set{name = value;}
		}
		public double Balance
		{
			get{return balance;}
			set{balance = value;}
		}
		public static void main()
		{
			Account[] account = new Account[3];
			account[0] = new Account("AB",5000);
			account[1] = new Account("Starc",6000);
			account[2] = new Account("joe",7000);
			foreach(int i in account)
			{
			Console.WriteLine("Name : "+i.Name+" Balance : "+i.Balance);
			}
		}	
	}
}

















